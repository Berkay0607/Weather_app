{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{useNavigate,useParams}from\"react-router-dom\";import\"./MainPage.css\";// CSS dosyasını import ediyoruz\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MainPage=()=>{const[city,setCity]=useState(\"\");// Kullanıcının girdiği şehir adı\nconst[weatherData,setWeatherData]=useState(null);// Hava durumu verisi\nconst[temperature,setTemperature]=useState(null);// Sıcaklık verisi\nconst[errorMessage,setErrorMessage]=useState(\"\");// Hata mesajı\nconst[loading,setLoading]=useState(false);// Yükleniyor durumu\nconst navigate=useNavigate();// Kullanıcıyı yönlendirmek için\nconst{city:urlCity}=useParams();// URL parametrelerinden şehir adı\n// Hava durumu ve sıcaklık verilerini çeken fonksiyon\nconst getWeatherData=async cityName=>{setLoading(true);// İstek yapıldığında yükleniyor durumunu başlat\ntry{const weatherResponse=await fetch(`https://wttr.in/${cityName}?format=%C`);if(weatherResponse.status===404||!weatherResponse.ok){throw new Error(\"Şehir bulunamadı. Lütfen geçerli bir şehir adı girin.\");}const weatherData=await weatherResponse.text();setWeatherData(weatherData);// Sıcaklık verisini almak için\nconst tempResponse=await fetch(`https://wttr.in/${cityName}?format=%t`);const tempData=await tempResponse.text();setTemperature(tempData);setErrorMessage(\"\");// Eğer her şey doğruysa, hata mesajını temizle\n}catch(error){setWeatherData(null);setTemperature(null);setErrorMessage(error.message);// Hata durumunda, hata mesajını ayarla\n}finally{setLoading(false);// İstek tamamlandığında yükleniyor durumunu sonlandır\n}};// URL parametresinde şehir adı varsa, bu değeri al ve güncelle\nuseEffect(()=>{if(urlCity){setCity(urlCity);// URL parametresindeki şehir ismini state'e atıyoruz\ngetWeatherData(urlCity);// Şehir ismiyle hava durumu verisini al\n}},[urlCity]);const handleSubmit=event=>{event.preventDefault();if(city){navigate(`/${city}`);// Şehri URL'ye ekleyerek yeni bir rota oluştur\ngetWeatherData(city);// Yeni şehir için verileri getir\n}};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Hava Durumu\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\u015Eehir ad\\u0131 girin...\",value:city,onChange:e=>setCity(e.target.value),className:\"input\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"button\",children:\"Ara\"})]}),errorMessage&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:errorMessage}),loading&&/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Y\\xFCkleniyor...\"}),weatherData&&/*#__PURE__*/_jsxs(\"div\",{className:\"weather-info\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"weather-data\",children:weatherData}),temperature&&/*#__PURE__*/_jsxs(\"div\",{className:\"temperature\",children:[\"S\\u0131cakl\\u0131k: \",temperature,\"\\xB0C\"]})]})]});};export default MainPage;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","jsx","_jsx","jsxs","_jsxs","MainPage","city","setCity","weatherData","setWeatherData","temperature","setTemperature","errorMessage","setErrorMessage","loading","setLoading","navigate","urlCity","getWeatherData","cityName","weatherResponse","fetch","status","ok","Error","text","tempResponse","tempData","error","message","handleSubmit","event","preventDefault","className","children","onSubmit","type","placeholder","value","onChange","e","target"],"sources":["C:/Users/berka/OneDrive/Masaüstü/programlar/yazilim/proje_rastgele/hava_durumu/frontend/src/pages/MainPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport \"./MainPage.css\"; // CSS dosyasını import ediyoruz\r\n\r\nconst MainPage = () => {\r\n  const [city, setCity] = useState(\"\"); // Kullanıcının girdiği şehir adı\r\n  const [weatherData, setWeatherData] = useState(null); // Hava durumu verisi\r\n  const [temperature, setTemperature] = useState(null); // Sıcaklık verisi\r\n  const [errorMessage, setErrorMessage] = useState(\"\"); // Hata mesajı\r\n  const [loading, setLoading] = useState(false); // Yükleniyor durumu\r\n  const navigate = useNavigate(); // Kullanıcıyı yönlendirmek için\r\n  const { city: urlCity } = useParams(); // URL parametrelerinden şehir adı\r\n\r\n  // Hava durumu ve sıcaklık verilerini çeken fonksiyon\r\n  const getWeatherData = async (cityName) => {\r\n    setLoading(true); // İstek yapıldığında yükleniyor durumunu başlat\r\n    try {\r\n      const weatherResponse = await fetch(`https://wttr.in/${cityName}?format=%C`);\r\n      \r\n      if (weatherResponse.status === 404 || !weatherResponse.ok) {\r\n        throw new Error(\"Şehir bulunamadı. Lütfen geçerli bir şehir adı girin.\");\r\n      }\r\n\r\n      const weatherData = await weatherResponse.text();\r\n      setWeatherData(weatherData);\r\n\r\n      // Sıcaklık verisini almak için\r\n      const tempResponse = await fetch(`https://wttr.in/${cityName}?format=%t`);\r\n      const tempData = await tempResponse.text();\r\n      setTemperature(tempData);\r\n\r\n      setErrorMessage(\"\"); // Eğer her şey doğruysa, hata mesajını temizle\r\n    } catch (error) {\r\n      setWeatherData(null);\r\n      setTemperature(null);\r\n      setErrorMessage(error.message); // Hata durumunda, hata mesajını ayarla\r\n    } finally {\r\n      setLoading(false); // İstek tamamlandığında yükleniyor durumunu sonlandır\r\n    }\r\n  };\r\n\r\n  // URL parametresinde şehir adı varsa, bu değeri al ve güncelle\r\n  useEffect(() => {\r\n    if (urlCity) {\r\n      setCity(urlCity); // URL parametresindeki şehir ismini state'e atıyoruz\r\n      getWeatherData(urlCity); // Şehir ismiyle hava durumu verisini al\r\n    }\r\n  }, [urlCity]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (city) {\r\n      navigate(`/${city}`); // Şehri URL'ye ekleyerek yeni bir rota oluştur\r\n      getWeatherData(city); // Yeni şehir için verileri getir\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"title\">Hava Durumu</h1>\r\n      <form onSubmit={handleSubmit} className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Şehir adı girin...\"\r\n          value={city}\r\n          onChange={(e) => setCity(e.target.value)}\r\n          className=\"input\"\r\n        />\r\n        <button type=\"submit\" className=\"button\">\r\n          Ara\r\n        </button>\r\n      </form>\r\n\r\n      {/* Hata mesajını göster */}\r\n      {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n\r\n      {/* Yükleniyor göstergesi */}\r\n      {loading && <div className=\"loading\">Yükleniyor...</div>}\r\n\r\n      {/* Hava durumu ve sıcaklık bilgisi */}\r\n      {weatherData && (\r\n        <div className=\"weather-info\">\r\n          <div className=\"weather-data\">{weatherData}</div>\r\n          {temperature && <div className=\"temperature\">Sıcaklık: {temperature}°C</div>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}