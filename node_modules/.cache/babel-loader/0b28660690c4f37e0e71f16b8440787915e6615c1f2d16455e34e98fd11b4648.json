{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\programlar\\\\yazilim\\\\proje_rastgele\\\\hava_durumu\\\\frontend\\\\src\\\\pages\\\\MainPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const [city, setCity] = useState(\"\"); // Kullanıcının girdiği şehir adı\n  const [weatherData, setWeatherData] = useState(null);\n  const [temperature, setTemperature] = useState(null); // Dereceyi saklayacağımız state\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const navigate = useNavigate(); // Kullanıcıyı yeni şehire yönlendirmek için\n\n  const getWeatherData = async cityName => {\n    try {\n      const response = await fetch(`https://wttr.in/${cityName}?format=%C`);\n      if (response.status === 404) {\n        throw new Error(\"Şehir bulunamadı. Lütfen geçerli bir şehir adı girin.\");\n      }\n      const data = await response.text();\n      setWeatherData(data);\n\n      // Sıcaklık verisini almak için\n      const tempResponse = await fetch(`https://wttr.in/${cityName}?format=%t`);\n      const tempData = await tempResponse.text();\n      setTemperature(tempData); // Sıcaklık verisini state'e kaydediyoruz\n\n      setErrorMessage(\"\");\n    } catch (error) {\n      setWeatherData(null);\n      setTemperature(null);\n      setErrorMessage(error.message);\n    }\n  };\n\n  // URL parametrelerinde şehir ismi varsa, onu al\n  const {\n    city: urlCity\n  } = useParams();\n  useEffect(() => {\n    if (urlCity) {\n      setCity(urlCity); // URL parametresindeki şehir ismini state'e atıyoruz\n      getWeatherData(urlCity);\n    }\n  }, [urlCity]);\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (city) {\n      navigate(`/${city}`); // Şehri URL'ye ekleyerek yeni bir rota oluştur\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hava Durumu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\u015Eehir ad\\u0131 girin...\",\n        value: city,\n        onChange: e => setCity(e.target.value),\n        className: \"border p-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"ml-2 p-2 bg-blue-500 text-white\",\n        children: \"Ara\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-500\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 24\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-green-500\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Hava durumu: \", weatherData]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), temperature && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"S\\u0131cakl\\u0131k: \", temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"VVh5O6DkBgy68tT+ESn9y31+rCc=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","jsxDEV","_jsxDEV","MainPage","_s","city","setCity","weatherData","setWeatherData","temperature","setTemperature","errorMessage","setErrorMessage","navigate","getWeatherData","cityName","response","fetch","status","Error","data","text","tempResponse","tempData","error","message","urlCity","handleSubmit","event","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","e","target","className","_c","$RefreshReg$"],"sources":["C:/Users/berka/OneDrive/Masaüstü/programlar/yazilim/proje_rastgele/hava_durumu/frontend/src/pages/MainPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nconst MainPage = () => {\r\n  const [city, setCity] = useState(\"\"); // Kullanıcının girdiği şehir adı\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [temperature, setTemperature] = useState(null); // Dereceyi saklayacağımız state\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const navigate = useNavigate(); // Kullanıcıyı yeni şehire yönlendirmek için\r\n\r\n  const getWeatherData = async (cityName) => {\r\n    try {\r\n      const response = await fetch(`https://wttr.in/${cityName}?format=%C`);\r\n      \r\n      if (response.status === 404) {\r\n        throw new Error(\"Şehir bulunamadı. Lütfen geçerli bir şehir adı girin.\");\r\n      }\r\n\r\n      const data = await response.text();\r\n      setWeatherData(data);\r\n\r\n      // Sıcaklık verisini almak için\r\n      const tempResponse = await fetch(`https://wttr.in/${cityName}?format=%t`);\r\n      const tempData = await tempResponse.text();\r\n      setTemperature(tempData); // Sıcaklık verisini state'e kaydediyoruz\r\n\r\n      setErrorMessage(\"\");\r\n    } catch (error) {\r\n      setWeatherData(null);\r\n      setTemperature(null);\r\n      setErrorMessage(error.message);\r\n    }\r\n  };\r\n\r\n  // URL parametrelerinde şehir ismi varsa, onu al\r\n  const { city: urlCity } = useParams();\r\n\r\n  useEffect(() => {\r\n    if (urlCity) {\r\n      setCity(urlCity); // URL parametresindeki şehir ismini state'e atıyoruz\r\n      getWeatherData(urlCity);\r\n    }\r\n  }, [urlCity]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (city) {\r\n      navigate(`/${city}`); // Şehri URL'ye ekleyerek yeni bir rota oluştur\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Hava Durumu</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Şehir adı girin...\"\r\n          value={city}\r\n          onChange={(e) => setCity(e.target.value)}\r\n          className=\"border p-2\"\r\n        />\r\n        <button type=\"submit\" className=\"ml-2 p-2 bg-blue-500 text-white\">\r\n          Ara\r\n        </button>\r\n      </form>\r\n      {errorMessage && <div className=\"text-red-500\">{errorMessage}</div>}\r\n      {weatherData && (\r\n        <div className=\"text-green-500\">\r\n          <p>Hava durumu: {weatherData}</p>\r\n          {temperature && <p>Sıcaklık: {temperature}°C</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}