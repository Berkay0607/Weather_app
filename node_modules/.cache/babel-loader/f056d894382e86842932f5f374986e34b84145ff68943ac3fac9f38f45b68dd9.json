{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\programlar\\\\yazilim\\\\proje_rastgele\\\\hava_durumu\\\\frontend\\\\src\\\\pages\\\\MainPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const {\n    city\n  } = useParams(); // URL'den şehir ismini alıyoruz\n  const [weatherData, setWeatherData] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(\"\"); // Hata mesajını tutmak için\n\n  const getWeatherData = async () => {\n    try {\n      const response = await fetch(`https://wttr.in/${city}?format=%C`);\n\n      // Eğer status code 404 ise hata mesajı döndür\n      if (response.status === 404) {\n        throw new Error(\"Şehir bulunamadı. Lütfen geçerli bir şehir adı girin.\");\n      }\n\n      // Geçerli bir yanıt alındıysa hava durumunu al\n      const data = await response.text();\n      setWeatherData(data);\n      setErrorMessage(\"\"); // Hata mesajını sıfırlıyoruz\n    } catch (error) {\n      setWeatherData(null); // Veriyi sıfırlıyoruz\n      setErrorMessage(error.message); // Hata mesajını set et\n    }\n  };\n\n  // Sayfa her render olduğunda şehir verisini al\n  useEffect(() => {\n    if (city) {\n      getWeatherData();\n    }\n  }, [city]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hava Durumu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-500\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 24\n    }, this), \" \", weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-green-500\",\n      children: weatherData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 23\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"9Lq1ODfBNRn3UadyGqM2j//PvqM=\", false, function () {\n  return [useParams];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","MainPage","_s","city","weatherData","setWeatherData","errorMessage","setErrorMessage","getWeatherData","response","fetch","status","Error","data","text","error","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/berka/OneDrive/Masaüstü/programlar/yazilim/proje_rastgele/hava_durumu/frontend/src/pages/MainPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst MainPage = () => {\r\n  const { city } = useParams(); // URL'den şehir ismini alıyoruz\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(\"\"); // Hata mesajını tutmak için\r\n\r\n  const getWeatherData = async () => {\r\n    try {\r\n      const response = await fetch(`https://wttr.in/${city}?format=%C`);\r\n\r\n      // Eğer status code 404 ise hata mesajı döndür\r\n      if (response.status === 404) {\r\n        throw new Error(\"Şehir bulunamadı. Lütfen geçerli bir şehir adı girin.\");\r\n      }\r\n\r\n      // Geçerli bir yanıt alındıysa hava durumunu al\r\n      const data = await response.text();\r\n      setWeatherData(data);\r\n      setErrorMessage(\"\"); // Hata mesajını sıfırlıyoruz\r\n    } catch (error) {\r\n      setWeatherData(null); // Veriyi sıfırlıyoruz\r\n      setErrorMessage(error.message); // Hata mesajını set et\r\n    }\r\n  };\r\n\r\n  // Sayfa her render olduğunda şehir verisini al\r\n  useEffect(() => {\r\n    if (city) {\r\n      getWeatherData();\r\n    }\r\n  }, [city]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Hava Durumu</h1>\r\n      {errorMessage && <div className=\"text-red-500\">{errorMessage}</div>} {/* Hata mesajını göster */}\r\n      {weatherData && <div className=\"text-green-500\">{weatherData}</div>} {/* Hava durumu verisini göster */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAK,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,CAAC;EAC9B,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtD,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmBP,IAAI,YAAY,CAAC;;MAEjE;MACA,IAAIM,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;MAC1E;;MAEA;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCT,cAAc,CAACQ,IAAI,CAAC;MACpBN,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdV,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;MACtBE,eAAe,CAACQ,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;IAClC;EACF,CAAC;;EAED;EACAnB,SAAS,CAAC,MAAM;IACd,IAAIM,IAAI,EAAE;MACRK,cAAc,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACL,IAAI,CAAC,CAAC;EAEV,oBACEH,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnBf,YAAY,iBAAIN,OAAA;MAAKsB,SAAS,EAAC,cAAc;MAAAL,QAAA,EAAEX;IAAY;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAAC,GAAC,EACpEjB,WAAW,iBAAIJ,OAAA;MAAKsB,SAAS,EAAC,gBAAgB;MAAAL,QAAA,EAAEb;IAAW;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAAC,GAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClE,CAAC;AAEV,CAAC;AAACnB,EAAA,CAtCID,QAAQ;EAAA,QACKH,SAAS;AAAA;AAAAyB,EAAA,GADtBtB,QAAQ;AAwCd,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}